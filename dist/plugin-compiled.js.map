{"version":3,"sources":["../plugin/plugin.js"],"names":[],"mappings":";;AAAA,CAAC,YAAW;AACV,MAAM,YAAY,EAAZ,CADI;AAEV,MAAM,SAAS,SAAT,MAAS;WAAU,WAAW,OAAO,GAAP,CAAW;aAAS,UAAU,MAAM,IAAN,CAAV,CAAsB,KAAtB;KAAT,CAAtB;GAAV;;;;;AAFL,MAOJ,aAAa,SAAb,UAAa;WAAS,MAAM,MAAN,CAAa,UAAC,CAAD,EAAI,CAAJ;aAAU,IAAI,CAAJ;KAAV;GAAtB,CAPT;AAQV,MAAM,SAAS,SAAT,MAAS,CAAC,IAAD,EAAO,KAAP;WAAiB,OAAO,MAAM,IAAN,CAAP,GAAqB,KAArB;GAAjB,CARL;;AAUV,MAAM,WAAW,SAAX,QAAW;WAAS,OAAO,OAAP,EAAgB,KAAhB,qBAAwC,MAAM,EAAN,iBAAoB,OAAO,YAAP,EAAqB,KAArB,WAAgC,MAAM,KAAN,aAA5F,GAAoH,EAApH;GAAT,CAVP;;AAYV,IAAE,MAAF,CAAS,iBAAT,EAA4B;AAC1B,aAAS,mBAAY;AACnB,UAAM,MAAM,KAAK,OAAL,CADO;AAEnB,UAAM,MAAM,KAAK,OAAL,CAFO;AAGnB,UAAM,MAAM,OAAO,IAAI,MAAJ,CAAb,CAHa;AAInB,UAAI,IAAJ,CAAS,GAAT,EAJmB;KAAZ;AAMT,gBAAY,sBAAU;AACpB,UAAM,YAAY,KAAK,OAAL,CADE;AAEpB,aAAO,KAAK,OAAL,CAAa,MAAb,CAAoB,GAApB,CAAwB,UAAS,KAAT,EAAe;AAC5C,eAAO;AACL,cAAI,MAAM,EAAN;AACJ,iBAAO,UAAU,IAAV,OAAmB,MAAM,EAAN,CAAnB,CAA+B,GAA/B,EAAP;SAFF,CAD4C;OAAf,CAA/B,CAFoB;KAAV;GAPd,EAZU;;AA8BV,IAAE,UAAF,CAAa,IAAb,CAAkB,OAAlB,GAA4B,UAAU,IAAV,EAAgB,QAAhB,EAA0B;AACpD,cAAU,IAAV,IAAkB,QAAlB,CADoD;GAA1B,CA9BlB;;AAkCV,IAAE,UAAF,CAAa,IAAb,CAAkB,OAAlB,CAA0B,MAA1B,EAAkC,UAAU,KAAV,EAAiB;AACjD,QAAI,OAAO,EAAP,CAD6C;AAEjD,WAAO,IAAP,EAAa,KAAb,IAAsB,KAAK,IAAL,6BAAoC,OAAO,IAAP,EAAa,KAAb,QAApC,CAAtB,GAAqF,QAAQ,GAAR,CAAY,gBAAZ,CAArF,CAFiD;AAGjD,aAAS,KAAT,IAAkB,KAAK,IAAL,CAAU,SAAS,KAAT,CAAV,CAAlB,GAA+C,EAA/C,CAHiD;;AAKjD,WAAO,WAAW,IAAX,CAAP,CALiD;GAAjB,CAAlC,CAlCU;;AA0CV,IAAE,UAAF,CAAa,IAAb,CAAkB,OAAlB,CAA0B,iBAA1B,EAA6C,UAAU,KAAV,EAAiB;AAC5D,QAAM,WAAW,WAAW,MAAM,OAAN,CAAc,GAAd,CAAkB;iCAAyB,aAAQ;KAAjC,CAA7B,CAAX,CADsD;;AAG5D,WAAO,kBAAe,MAAM,EAAN,QAAf,GACH,QADG,GAEH,WAFG,CAHqD;GAAjB,CAA7C,CA1CU;;AAkDV,IAAE,UAAF,CAAa,IAAb,CAAkB,OAAlB,CAA0B,eAA1B,EAA2C,UAAU,KAAV,EAAiB;AAC1D,QAAM,WAAW,WAAW,MAAM,OAAN,CAAc,GAAd,CAAkB;iCAAyB,aAAQ;KAAjC,CAA7B,CAAX,CADoD;;AAG1D,WAAO,kBAAe,MAAM,EAAN,QAAf,GACH,QADG,GAEH,WAFG,CAHmD;GAAjB,CAA3C,CAlDU;CAAX,CAAD","file":"plugin-compiled.js","sourcesContent":["(function() {\r\n  const funciones = {};\r\n  const render = fields => concatThis(fields.map(field => funciones[field.type](field)));\r\n\r\n  /**\r\n   * These are some pretty useful functions\r\n   */\r\n  const concatThis = toMap => toMap.reduce((a, b) => a + b);\r\n  const isProp = (prop, field) => prop ? field[prop] : false;\r\n\r\n  const hasLabel = field => isProp('label', field) ? `<label for=\"${field.id}\" class=\"${isProp('labelClass', field)}\">${field.label}</label>` : '';\r\n\r\n  $.widget(\"createForm.form\", {\r\n    _create: function () {\r\n      const $el = this.element;\r\n      const opt = this.options;\r\n      const tpl = render(opt.fields);\r\n      $el.html(tpl);\r\n    },\r\n    dameLaData: function(){\r\n      const $domScope = this.element;\r\n      return this.options.fields.map(function(field){\r\n        return {\r\n          id: field.id,\r\n          value: $domScope.find(`#${field.id}`).val()\r\n        };\r\n      });\r\n    }\r\n  });\r\n\r\n  $.createForm.form.addType = function (name, renderer) {\r\n    funciones[name] = renderer;\r\n  };\r\n\r\n  $.createForm.form.addType(\"text\", function (field) {\r\n    var text = [];\r\n    isProp('id', field) ? text.push(`<input type=\"text\" id=\"${isProp('id', field)}\">`) : console.log('ID is required');\r\n    hasLabel(field) ? text.push(hasLabel(field)) : '';\r\n\r\n    return concatThis(text);\r\n  });\r\n\r\n  $.createForm.form.addType(\"optionsDropdown\", function (field) {\r\n    const opciones = concatThis(field.options.map(opt => `<option value=\"${opt}\">${opt}</option>`));\r\n\r\n    return `<select id='${field.id}'>`\r\n      + opciones\r\n      + \"</select>\"\r\n  });\r\n\r\n  $.createForm.form.addType(\"optionsButton\", function (field) {\r\n    const opciones = concatThis(field.options.map(opt => `<option value=\"${opt}\">${opt}</option>`));\r\n\r\n    return `<select id='${field.id}'>`\r\n      + opciones\r\n      + \"</select>\"\r\n  });\r\n\r\n})();\r\n"]}